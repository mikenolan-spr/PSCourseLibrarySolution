steps:
  # 1. Restore dependencies
  # Use the official .NET 8 SDK image from Microsoft's container registry.
  - name: 'mcr.microsoft.com/dotnet/sdk:8.0'
    entrypoint: 'dotnet'
    args: ['restore', '${_PROJECT_NAME}/${_PROJECT_NAME}.csproj']
    id: 'restore'

  # 2. Compile source code
  # This step builds the project in Release configuration.
  # The --no-restore flag is used because dependencies were restored in the previous step.
  - name: 'mcr.microsoft.com/dotnet/sdk:8.0'
    entrypoint: 'dotnet'
    args:
      - 'build'
      - '${_PROJECT_NAME}/${_PROJECT_NAME}.csproj'
      - '--configuration'
      - 'Release'
      - '--no-restore'
    id: 'build'
    waitFor: ['restore']

  # 3. Execute unit tests
  # This step runs tests. I've assumed your test project is in a directory
  # named 'PSCourseLibrary.Tests'. You should adjust the path if it's different.
  # The --no-build flag is used because the project was already built.
  - name: 'mcr.microsoft.com/dotnet/sdk:8.0'
    entrypoint: 'dotnet'
    args:
      - 'test'
      - '${_PROJECT_NAME}.Tests/${_PROJECT_NAME}.Tests.csproj' # Uncomment and update if you have a test project
      - '--configuration'
      - 'Release'
#      - '--no-build'
    id: 'test'
    waitFor: ['build']

  # 4. Create NuGet package
  # This step packages the library into a .nupkg file.
  # The output will be placed in the 'artifacts' directory.
  - name: 'mcr.microsoft.com/dotnet/sdk:8.0'
    entrypoint: 'dotnet'
    args:
      - 'pack'
      - '${_PROJECT_NAME}/${_PROJECT_NAME}.csproj'
      - '--configuration'
      - 'Release'
      - '--output'
      - './artifacts'
      - '--no-build'
    id: 'pack'
    waitFor: ['test']

  # 5. Extract version and upload NuGet package to Artifact Registry
  # This step runs a script to:
  # 1. Read the <PackageVersion> from the .csproj file.
  # 2. Use that version to upload the correct .nupkg file to a generic repository.
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e
        # Extract version from the .csproj file using grep and sed
        VERSION=$$(grep '<PackageVersion>' ${_PROJECT_NAME}/${_PROJECT_NAME}.csproj | sed 's/.*<PackageVersion>\(.*\)<\/PackageVersion>.*/\1/')
        echo "Found package version: $$VERSION"

        # Upload the package using the extracted version
        gcloud artifacts generic upload \
          --source=./artifacts/${_PROJECT_NAME}.$$VERSION.nupkg \
          --repository=ps-course-nuget-repo \
          --location=us-central1 \
          --package=PSCourseLibrary \
          --version=$$VERSION
    id: 'upload'
    waitFor: ['pack']

substitutions:
  _PROJECT_NAME: PSCourseLibrary

options:
  logging: CLOUD_LOGGING_ONLY
